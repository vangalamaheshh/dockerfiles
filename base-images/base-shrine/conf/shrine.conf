//Default settings for akka
akka {
  loglevel = INFO
  log-config-on-start = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  //Toggles whether the threads created by this ActorSystem should be daemons or not. Use daemonic inside of tomcat to support shutdown
  daemonic = on
}

//You will see these settings for spray, baked into the .war files.
spray.servlet {
  boot-class = "net.shrine.dashboard.net.shrine.metadata.Boot"
  request-timeout = 30s
}

shrine {
  
  metaData {
    ping = "pong"
  }
  
  pmEndpoint {
    url = "http://core:9090/i2b2/services/PMService/getServices" //use your i2b2 pm url
  }
  
  ontEndpoint {
    url = "http://core:9090/i2b2/services/OntologyService/" //use your i2b2 ontology url
  }
  
  hiveCredentials {   //use your i2b2 hive credentials
    domain = "i2b2demo"
    username = "demo"
    password = "demouser"
    crcProjectId = "Demo"
    ontProjectId = "SHRINE"
  }

  adapter {
    crcEndpoint {
      url = "http://core:9090/i2b2/services/QueryToolService/"
      acceptAllCerts = true
    }

    setSizeObfuscation = true

    adapterLockoutAttemptsThreshold = 1000

    adapterMappingsFileName = "AdapterMappings.xml"
    
    maxSignatureAge {
      minutes = 5
    }
    
    immediatelyRunIncomingQueries = true
  }

  queryEntryPoint {
    includeAggregateResults = true
    attachSigningCert = false 
    maxQueryWaitTime {
      minutes = 20
    }

    authenticationType = "pm"
    authorizationType = "shrine-steward"

    shrineSteward {
      qepUserName = "qep"
      qepPassword = "demouser"
      stewardBaseUrl = "https://localhost:6443"
    }

    broadcasterServiceEndpoint {
      url = "https://localhost:6443/shrine/rest/broadcaster/broadcast"
      acceptAllCerts = true
    }
  }

  networkStatusQuery = "\\\\SHRINE\\SHRINE\\Diagnoses\\Mental Illness\\Disorders usually diagnosed in infancy, childhood, or adolescence\\Pervasive developmental disorders\\Infantile autism, current or active state\\"

  humanReadableNodeName = "qep"

  shrineDatabaseType = "mysql"

  keystore {
    file = "/opt/shrine/shrine.keystore"
    password = "sslpass"
    privateKeyAlias = "shrine-ssl"
    keyStoreType = "JKS"
    caCertAliases = [shrine-ca]
  }

  breakdownResultOutputTypes {

    PATIENT_GENDER_COUNT_XML {
      description = "Gender patient breakdown"
    }

    PATIENT_VITALSTATUS_COUNT_XML {
      description = "Vital Status patient breakdown"
    }

    PATIENT_RACE_COUNT_XML {
      description = "Race patient breakdown"
    }

    PATIENT_AGE_COUNT_XML {
      description = "Age patient breakdown"
    }

  }

  hub {
    maxQueryWaitTime {
      minutes = 20
    }

    downstreamNodes {
      "qep" = "https://localhost:6443/shrine/rest/adapter"
    }

    shouldQuerySelf = true
  }

  steward {
    //Can be Pending, Approved, or TopcisIgnoredJustLog
    //Pending - new topics start in the Pending state; researchers must wait for the Steward to approve them
    //Approved - new topics start in the Approved state; researchers can use them immediately
    //TopicsIgnoredJustLog - all queries are logged and approved; researchers don't need to create topics
    createTopicsMode = Pending

    usersource {
      domain = "i2b2demo"
    }

    database {
      dataSourceFrom = "JNDI" // Can be JNDI or testDataSource. Use testDataSource for tests, JNDI everywhere else
      jndiDataSourceName = "java:comp/env/jdbc/stewardDB" //leave out for tests
      slickProfileClassName = "scala.slick.driver.MySQLDriver$" // Can be scala.slick.driver.H2Driver$
                                                                //        scala.slick.driver.MySQLDriver$
                                                                //        scala.slick.driver.PostgresDriver$
                                                                //        scala.slick.driver.SQLServerDriver$
                                                                //        scala.slick.driver.JDBCDriver$
                                                                //        com.typesafe.slick.driver.oracle.OracleDriver$
                                                                //
                                                                //        (Yes, with the $ on the end)

    }
  }

  dashboard {
    happyBaseUrl = "https://localhost:6443/shrine/rest/happy"
    statusBaseUrl = "https://localhost:6443/shrine/rest/internalstatus"
    database {
      dataSourceFrom = "JNDI"
      jndiDataSourceName = "java:comp/env/jdbc/problemDB"
      slickProfileClassName = "slick.driver.MySQLDriver$" // Can be
          // slick.driver.H2Driver$
          // slick.driver.MySQLDriver$
          // slick.driver.PostgresDriver$
          // slick.driver.SQLServerDriver$
          // slick.driver.JdbcDriver$
          // freeslick.OracleProfile$
          // freeslick.MSSQLServerProfile$
    }
  }

  status {
    permittedHostOfOrigin = "localhost"
  }

  problem {
    problemHandler = "net.shrine.problem.LogAndDatabaseProblemHandler$" //Can be other specialized problemHandler implementations
  }
}
